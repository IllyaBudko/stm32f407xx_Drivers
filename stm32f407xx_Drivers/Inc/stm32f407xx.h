/*
 * stm32f407xx.h
 *
 *  Created on: Jan 18, 2020
 *      Author: Illya Budko
 */

#ifndef STM32F407XX_H_
#define STM32F407XX_H_

#include <stdio.h>
#include <stdint.h>
#include <stddef.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Base addresses of FLASH memory and SRAM memory
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define FLASH_BASE_ADDR		0x08000000U		//Flash base address
#define SRAM1_BASE_ADDR		0x20000000U		//SRAM1 base address
#define SRAM2_BASE_ADDR		0x2001C000U		//SRAM2 base address
#define	ROM_BASE_ADDR		0x1FFF0000U		//ROM base address, system memory block of flash module organization
#define	SRAM				SRAM1_BASE_ADDR	//SRAM beginning



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//AHBx bus and APBx bus peripheral base addresses
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define AHB1_BASE_ADDR		0x40020000U		//AHB1 bus base address
#define AHB2_BASE_ADDR		0x50000000U		//AHB2 bus base address
#define	AHB3_BASE_ADDR		0xA0000000U		//AHB3 bus base address

#define APB1_BASE_ADDR		0x40000000U		//APB1 bus base address
#define	APB2_BASE_ADDR		0x40010000U		//APB2 bus base address



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Peripheral base addresses
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//GPIOx peripheral base addresses
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define GPIOA_BASE_ADDR		(AHB1_BASE_ADDR + 0x0000)	//GPIOA base address
#define GPIOB_BASE_ADDR		(AHB1_BASE_ADDR + 0x0400)	//GPIOB base address
#define GPIOC_BASE_ADDR		(AHB1_BASE_ADDR + 0x0800)	//GPIOC base address
#define GPIOD_BASE_ADDR		(AHB1_BASE_ADDR + 0x0C00)	//GPIOD base address
#define GPIOE_BASE_ADDR		(AHB1_BASE_ADDR + 0x1000)	//GPIOE base address
#define GPIOF_BASE_ADDR		(AHB1_BASE_ADDR + 0x1400)	//GPIOF base address
#define GPIOG_BASE_ADDR		(AHB1_BASE_ADDR + 0x1800)	//GPIOG base address
#define GPIOH_BASE_ADDR		(AHB1_BASE_ADDR + 0x1C00)	//GPIOH base address
#define GPIOI_BASE_ADDR		(AHB1_BASE_ADDR + 0x2000)	//GPIOI base address

//SPIx peripheral base addresses
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define SPI1_BASE_ADDR		(APB2_BASE_ADDR + 0x3000)	//SPI1 base address
#define SPI2_BASE_ADDR		(APB1_BASE_ADDR + 0x3800)	//SPI2 base address
#define SPI3_BASE_ADDR		(APB1_BASE_ADDR + 0x3C00)	//SPI3 base address
#define SPI4_BASE_ADDR		(APB2_BASE_ADDR + 0x3400)	//SPI4 base address
#define SPI5_BASE_ADDR		(APB2_BASE_ADDR + 0x5000)	//SPI5 base address
#define SPI6_BASE_ADDR		(APB2_BASE_ADDR + 0x5400)	//SPI6 base address

//I2Cx peripheral base addresses
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define I2C1_BASE_ADDR		(APB1_BASE_ADDR + 0x5400)	//I2C1 base address
#define I2C2_BASE_ADDR		(APB1_BASE_ADDR + 0x5800)	//I2C2 base address
#define I2C3_BASE_ADDR		(APB1_BASE_ADDR + 0x5C00)	//I2C3 base address

//USARTx & UARTx peripheral base address
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define	USART1_BASE_ADDR	(APB2_BASE_ADDR + 0x1000)	//USART1 base address
#define	USART2_BASE_ADDR	(APB1_BASE_ADDR + 0x4400)	//USART2 base address
#define	USART3_BASE_ADDR	(APB1_BASE_ADDR + 0x4800)	//USART3 base address
#define	UART4_BASE_ADDR		(APB1_BASE_ADDR + 0x4C00)	//UART4 base address
#define	UART5_BASE_ADDR		(APB1_BASE_ADDR + 0x4C00)	//USART5 base address
#define	USART6_BASE_ADDR	(APB2_BASE_ADDR + 0x1400)	//USART6 base address

//RCC peripheral base address
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define RCC_BASE_ADDR		(AHB1_BASE_ADDR + 0x3800)	//RCC base address

//EXTI peripheral base address
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define EXTI_BASE_ADDR		(APB2_BASE_ADDR + 0x3C00)	//EXTI base address

//SYSCFG peripheral base address
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define	SYSCFG_BASE_ADDR	(APB2_BASE_ADDR + 0x3800)	//SYSCFG base address



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//NVIC ICER & ISER register addresses
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//NVIC ICER register addresses
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define NVIC_ISER0	((volatile uint32_t *)0xE000E100)		//ICER0 Register base address
#define NVIC_ISER1	((volatile uint32_t *)0xE000E104)		//ICER1 Register base address
#define NVIC_ISER2	((volatile uint32_t *)0xE000E108)		//ICER2 Register base address
#define NVIC_ISER3	((volatile uint32_t *)0xE000E10C)		//ICER3 Register base address
#define NVIC_ISER4	((volatile uint32_t *)0xE000E110)		//ICER4 Register base address
#define NVIC_ISER5	((volatile uint32_t *)0xE000E114)		//ICER5 Register base address
#define NVIC_ISER6	((volatile uint32_t *)0xE000E118)		//ICER6 Register base address
#define NVIC_ISER7	((volatile uint32_t *)0xE000E11C)		//ICER7 Register base address

//ISER register addresses
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define NVIC_ICER0	((volatile uint32_t *)0xE000E180)		//ISER0 Register base address
#define NVIC_ICER1	((volatile uint32_t *)0xE000E184)		//ISER1 Register base address
#define NVIC_ICER2	((volatile uint32_t *)0xE000E188)		//ISER2 Register base address
#define NVIC_ICER3	((volatile uint32_t *)0xE000E18C)		//ISER3 Register base address
#define NVIC_ICER4	((volatile uint32_t *)0xE000E190)		//ISER4 Register base address
#define NVIC_ICER5	((volatile uint32_t *)0xE000E194)		//ISER5 Register base address
#define NVIC_ICER6	((volatile uint32_t *)0xE000E198)		//ISER6 Register base address
#define NVIC_ICER7	((volatile uint32_t *)0xE000E19C)		//ISER7 Register base address

//NVIC PR Base address
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define NVIC_PR_BASE_ADDR ((volatile uint32_t *)0xE000E400) //IPR Register base address



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Peripheral register definition structures
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//GPIOx register definition
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct
{
	volatile uint32_t MODER;		//GPIOx Port mode register
	volatile uint32_t OTYPER;		//GPIOx Port output type register
	volatile uint32_t OSPEEDR;		//GPIOx Port output speed register
	volatile uint32_t PUPDR;		//GPIOx Port port pull-up/pull-down register
	volatile uint32_t IDR;			//GPIOx Port input data register
	volatile uint32_t ODR;			//GPIOx Port output data register
	volatile uint32_t BSRR;			//GPIOx Port bit set/reset register
	volatile uint32_t LCKR;			//GPIOx Port configuration lock register
	volatile uint32_t AFRL;			//GPIOx Alternate function low register
	volatile uint32_t AFRH;			//GPIOx Alternate function high register
}GPIOx_RegDef_t;

//SPIx register definition
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct
{
	volatile uint32_t CR1;			//SPIx Control register 1
	volatile uint32_t CR2;			//SPIx Control register 2
	volatile uint32_t SR;			//SPIx Status register
	volatile uint32_t DR;			//SPIx Data register
	volatile uint32_t CRCPR;		//SPIx CRC polynomial register
	volatile uint32_t RXCRCR;		//SPIx RX CRC register
	volatile uint32_t TXCRCR;		//SPIx TX CRC register
	volatile uint32_t I2SCFGR;		//SPIx I2S configuration register
	volatile uint32_t I2SPR;		//SPIx I2S prescaler register
}SPIx_RegDef_t;

//I2Cx register definition
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct
{
	volatile uint32_t CR1;			//I2Cx Control register 1
	volatile uint32_t CR2;			//I2Cx Control register 2
	volatile uint32_t OAR1;			//I2Cx Own address register 1
	volatile uint32_t OAR2;			//I2Cx Own address register 2
	volatile uint32_t DR;			//I2Cx Data register
	volatile uint32_t SR1;			//I2Cx Status register 1
	volatile uint32_t SR2;			//I2Cx Status register 2
	volatile uint32_t CCR;			//I2Cx Clock Control register
	volatile uint32_t TRISE;		//I2Cx TRISE register
	volatile uint32_t FLTR;			//I2Cx FLTR register
}I2Cx_RegDef_t;

//USARTx register definition
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct
{
	volatile uint32_t SR;			//USARTx Status register
	volatile uint32_t DR;			//USARTx Data register
	volatile uint32_t BRR;			//USARTx Baud rate register
	volatile uint32_t CR1;			//USARTx Control register 1
	volatile uint32_t CR2;			//USARTx Control register 2
	volatile uint32_t CR3;			//USARTx Control register 3
	volatile uint32_t GTPR;			//USARTx Guard time and prescaler register
}USARTx_RegDef_t;

//RCC register definition
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct
{
	volatile uint32_t CR;			//RCC Clock control register
	volatile uint32_t PLLCFGR;		//RCC PLL configuration register
	volatile uint32_t CFGR;			//RCC Clock configuration register
	volatile uint32_t CIR;			//RCC Clock interrupt register
	volatile uint32_t AHB1RSTR;		//RCC AHB1 peripheral reset register register
	volatile uint32_t AHB2RSTR;		//RCC AHB2 peripheral reset register register
	volatile uint32_t AHB3RSTR;		//RCC AHB3 peripheral reset register register
			 uint32_t RESERVED_1;
	volatile uint32_t APB1RSTR;		//RCC APB1 peripheral reset register register
	volatile uint32_t APB2RSTR;		//RCC APB2 peripheral reset register register
			 uint32_t RESERVED_2;
			 uint32_t RESERVED_3;
	volatile uint32_t AHB1ENR;		//RCC AHB1 peripheral clock enable register register
	volatile uint32_t AHB2ENR;		//RCC AHB2 peripheral clock enable register register
	volatile uint32_t AHB3ENR;		//RCC AHB3 peripheral clock enable register register
			 uint32_t RESERVED_4;
	volatile uint32_t APB1ENR;		//RCC AHB1 peripheral clock enable register register
	volatile uint32_t APB2ENR;		//RCC AHB2 peripheral clock enable register register
			 uint32_t RESERVED_5;
			 uint32_t RESERVED_6;
	volatile uint32_t AHB1LPENR;	//RCC AHB1 peripheral clock enable in low power mode register
	volatile uint32_t AHB2LPENR;	//RCC AHB2 peripheral clock enable in low power mode register
	volatile uint32_t AHB3LPENR;	//RCC AHB3 peripheral clock enable in low power mode register
			 uint32_t RESERVED_7;
	volatile uint32_t APB1LPENR;	//RCC APB1 peripheral clock enable in low power mode register
	volatile uint32_t APB2LPENR;	//RCC APB2 peripheral clock enable in low power mode register
			 uint32_t RESERVED_8;
			 uint32_t RESERVED_9;
	volatile uint32_t BDCR;			//RCC Backup domain control register
	volatile uint32_t CSR;			//RCC clock control & status register
			 uint32_t RESERVED_10;
			 uint32_t RESERVED_11;
	volatile uint32_t SSCGR;		//RCC spread spectrum clock generation register
	volatile uint32_t PLLI2SFGR;	//RCC PLLI2S configuration register
}RCC_RegDef_t;

//EXTI register definition
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct
{
	volatile uint32_t IMR;			//EXTI Interrupt mask register
	volatile uint32_t EMR;			//EXTI Event mask register
	volatile uint32_t RTSR;			//EXTI Rising trigger selection register
	volatile uint32_t FTSR;			//EXTI Falling trigger selection register
	volatile uint32_t SWIER;		//EXTI Software interrupt event register
	volatile uint32_t PR;			//EXTI Pending register
}EXTI_RegDef_t;

//SYSCFG register definition
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct
{
	volatile uint32_t MEMRMP;		//SYSCFG Memory remap register
	volatile uint32_t PMC;			//SYSCFG Peripheral mode configuration register
	volatile uint32_t EXTICR1;		//SYSCFG External interrupt configuration register 1
	volatile uint32_t EXTICR2;		//SYSCFG External interrupt configuration register 2
	volatile uint32_t EXTICR3;		//SYSCFG External interrupt configuration register 3
	volatile uint32_t EXTICR4;		//SYSCFG External interrupt configuration register 4
			 uint32_t RESERVED_1;
			 uint32_t RESERVED_2;
	volatile uint32_t CMPCR;		//SYSCFG Compensation cell control register
}SYSCFG_RegDef_t;



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Peripheral definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//GPIOx peripheral definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define GPIOA	((GPIOx_RegDef_t *)GPIOA_BASE_ADDR)		//GPIOA Peripheral definition
#define GPIOB	((GPIOx_RegDef_t *)GPIOB_BASE_ADDR)		//GPIOB Peripheral definition
#define GPIOC	((GPIOx_RegDef_t *)GPIOC_BASE_ADDR)		//GPIOC Peripheral definition
#define GPIOD 	((GPIOx_RegDef_t *)GPIOD_BASE_ADDR)		//GPIOD Peripheral definition
#define GPIOE 	((GPIOx_RegDef_t *)GPIOE_BASE_ADDR)		//GPIOE Peripheral definition
#define GPIOF 	((GPIOx_RegDef_t *)GPIOF_BASE_ADDR)		//GPIOF Peripheral definition
#define GPIOG 	((GPIOx_RegDef_t *)GPIOG_BASE_ADDR)		//GPIOG Peripheral definition
#define GPIOH 	((GPIOx_RegDef_t *)GPIOH_BASE_ADDR)		//GPIOH Peripheral definition
#define GPIOI 	((GPIOx_RegDef_t *)GPIOI_BASE_ADDR)		//GPIOI Peripheral definition

//GPIOx Base address to code
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define GPIO_BASEADDR_TO_CODE(x)	((x == GPIOA)?0:\
									 (x == GPIOB)?1:\
									 (x == GPIOC)?2:\
									 (x == GPIOD)?3:\
									 (x == GPIOE)?4:\
									 (x == GPIOF)?5:\
									 (x == GPIOG)?6:\
									 (x == GPIOH)?7:\
									 (x == GPIOI)?8:0)

//SPIx peripheral definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define SPI1	((SPIx_RegDef_t *)SPI1_BASE_ADDR)		//SPI1 Peripheral definition
#define SPI2	((SPIx_RegDef_t *)SPI2_BASE_ADDR)		//SPI2 Peripheral definition
#define SPI3	((SPIx_RegDef_t *)SPI3_BASE_ADDR)		//SPI3 Peripheral definition

//I2Cx peripheral definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define I2C1	((I2Cx_RegDef_t *)I2C1_BASE_ADDR)		//I2C1 Peripheral definition
#define I2C2	((I2Cx_RegDef_t *)I2C2_BASE_ADDR)		//I2C2 Peripheral definition
#define I2C3	((I2Cx_RegDef_t *)I2C3_BASE_ADDR)		//I2C3 Peripheral definition

//USARTx & UARTx peripheral definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define USART1	((USARTx_RegDef_t *)USART1_BASE_ADDR)	//USART1 Peripheral definition
#define USART2	((USARTx_RegDef_t *)USART2_BASE_ADDR)	//USART2 Peripheral definition
#define USART3	((USARTx_RegDef_t *)USART3_BASE_ADDR)	//USART3 Peripheral definition
#define UART4	((USARTx_RegDef_t *)UART4_BASE_ADDR)	//UART4  Peripheral definition
#define UART5	((USARTx_RegDef_t *)UART5_BASE_ADDR)	//UART5  Peripheral definition
#define USART6	((USARTx_RegDef_t *)USART6_BASE_ADDR)	//USART6 Peripheral definition

//RCC peripheral definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define RCC		((RCC_RegDef_t *)RCC_BASE_ADDR)			//RCC Peripheral definition

//EXTI peripheral definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define EXTI	((EXTI_RegDef_t *)EXTI_BASE_ADDR)		//EXTI Peripheral definition

//SYSCFG peripheral definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define SYSCFG	((SYSCFG_RegDef_t *)SYSCFG_BASE_ADDR)	//SYSCFG Peripheral definition



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Peripheral clock enable macros
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//GPIOx Peripheral clock enable
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define GPIOA_PCLK_EN()		(RCC->AHB1ENR |= (1 << 0))		//GPIOA Peripheral clock enable
#define GPIOB_PCLK_EN()		(RCC->AHB1ENR |= (1 << 1))		//GPIOB Peripheral clock enable
#define GPIOC_PCLK_EN()		(RCC->AHB1ENR |= (1 << 2))		//GPIOC Peripheral clock enable
#define GPIOD_PCLK_EN()		(RCC->AHB1ENR |= (1 << 3))		//GPIOD Peripheral clock enable
#define GPIOE_PCLK_EN()		(RCC->AHB1ENR |= (1 << 4))		//GPIOE Peripheral clock enable
#define GPIOF_PCLK_EN()		(RCC->AHB1ENR |= (1 << 5))		//GPIOF Peripheral clock enable
#define GPIOG_PCLK_EN()		(RCC->AHB1ENR |= (1 << 6))		//GPIOG Peripheral clock enable
#define GPIOH_PCLK_EN()		(RCC->AHB1ENR |= (1 << 7))		//GPIOH Peripheral clock enable
#define GPIOI_PCLK_EN()		(RCC->AHB1ENR |= (1 << 8))		//GPIOI Peripheral clock enable

//SPIx Peripheral clock enable
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define SPI1_PCLK_EN()		(RCC->APB2ENR |= (1 << 12))		//SPI1 Peripheral clock enable
#define SPI2_PCLK_EN()		(RCC->APB1ENR |= (1 << 14))		//SPI2 Peripheral clock enable
#define SPI3_PCLK_EN()		(RCC->APB1ENR |= (1 << 15))		//SPI3 Peripheral clock enable

//I2Cx Peripheral clock enable
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define I2C1_PCLK_EN()		(RCC->APB1ENR |= (1 << 21))		//I2C1 Peripheral clock enable
#define I2C2_PCLK_EN()		(RCC->APB1ENR |= (1 << 22))		//I2C2 Peripheral clock enable
#define I2C3_PCLK_EN()		(RCC->APB1ENR |= (1 << 23))		//I2C3 Peripheral clock enable

//USARTx & UARTx Peripheral clock enable
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define USART1_PCLK_EN()	(RCC->APB2ENR |= (1 << 4))		//USART1 Peripheral clock enable
#define USART2_PCLK_EN()	(RCC->APB1ENR |= (1 << 17))		//USART2 Peripheral clock enable
#define USART3_PCLK_EN()	(RCC->APB1ENR |= (1 << 18))		//USART3 Peripheral clock enable
#define UART4_PCLK_EN()		(RCC->APB1ENR |= (1 << 19))		//UART4  Peripheral clock enable
#define UART5_PCLK_EN()		(RCC->APB1ENR |= (1 << 20))		//UART5  Peripheral clock enable
#define USART6_PCLK_EN()	(RCC->APB2ENR |= (1 << 5))		//USART6 Peripheral clock enable

//SYSCFG Peripheral clock enable
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define SYSCFG_PCLK_EN()	(RCC->APB2ENR |= (1 << 14))		//SYSCFG Peripheral clock enable



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Peripheral clock disable macros
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//GPIOx Peripheral clock disable
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define GPIOA_PCLK_DI()		(RCC->AHB1ENR &= ~(1 << 0))		//GPIOA Peripheral clock disable
#define GPIOB_PCLK_DI()		(RCC->AHB1ENR &= ~(1 << 1))		//GPIOB Peripheral clock disable
#define GPIOC_PCLK_DI()		(RCC->AHB1ENR &= ~(1 << 2))		//GPIOC Peripheral clock disable
#define GPIOD_PCLK_DI()		(RCC->AHB1ENR &= ~(1 << 3))		//GPIOD Peripheral clock disable
#define GPIOE_PCLK_DI()		(RCC->AHB1ENR &= ~(1 << 4))		//GPIOE Peripheral clock disable
#define GPIOF_PCLK_DI()		(RCC->AHB1ENR &= ~(1 << 5))		//GPIOF Peripheral clock disable
#define GPIOG_PCLK_DI()		(RCC->AHB1ENR &= ~(1 << 6))		//GPIOG Peripheral clock disable
#define GPIOH_PCLK_DI()		(RCC->AHB1ENR &= ~(1 << 7))		//GPIOH Peripheral clock disable
#define GPIOI_PCLK_DI()		(RCC->AHB1ENR &= ~(1 << 8))		//GPIOI Peripheral clock disable

//SPIx Peripheral clock disable
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define SPI1_PCLK_DI()		(RCC->APB2ENR &= ~(1 << 12))	//SPI1 Peripheral clock disable
#define SPI2_PCLK_DI()		(RCC->APB1ENR &= ~(1 << 14))	//SPI2 Peripheral clock disable
#define SPI3_PCLK_DI()		(RCC->APB1ENR &= ~(1 << 15))	//SPI3 Peripheral clock disable

//I2Cx Peripheral clock disable
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define I2C1_PCLK_DI()		(RCC->APB1ENR &= ~(1 << 21))	//I2C1 Peripheral clock disable
#define I2C2_PCLK_DI()		(RCC->APB1ENR &= ~(1 << 22))	//I2C2 Peripheral clock disable
#define I2C3_PCLK_DI()		(RCC->APB1ENR &= ~(1 << 23))	//I2C3 Peripheral clock disable

//USARTx & UARTx Peripheral clock disable
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define USART1_PCLK_DI()	(RCC->APB2ENR &= ~(1 << 4))		//USART1 Peripheral clock disable
#define USART2_PCLK_DI()	(RCC->APB1ENR &= ~(1 << 17))	//USART2 Peripheral clock disable
#define USART3_PCLK_DI()	(RCC->APB1ENR &= ~(1 << 18))	//USART3 Peripheral clock disable
#define UART4_PCLK_DI()		(RCC->APB1ENR &= ~(1 << 19))	//UART4  Peripheral clock disable
#define UART5_PCLK_DI()		(RCC->APB1ENR &= ~(1 << 20))	//UART5  Peripheral clock disable
#define USART6_PCLK_DI()	(RCC->APB2ENR &= ~(1 << 5))		//USART6 Peripheral clock disable

//SYSCFG Peripheral clock disable
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define SYSCFG_PCLK_DI()	(RCC->APB2ENR &= ~(1 << 14))	//SYSCFG Peripheral clock disable



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Peripheral reset macros
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//GPIOx Peripheral reset
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define GPIOA_RESET()		do{(RCC->AHB1RSTR |= (1 << 0));(RCC->AHB1RSTR &= ~(1 << 0));}while(0)		//GPIOA Reset
#define GPIOB_RESET()		do{(RCC->AHB1RSTR |= (1 << 1));(RCC->AHB1RSTR &= ~(1 << 1));}while(0)		//GPIOB Reset
#define GPIOC_RESET()		do{(RCC->AHB1RSTR |= (1 << 2));(RCC->AHB1RSTR &= ~(1 << 2));}while(0)		//GPIOC Reset
#define GPIOD_RESET()		do{(RCC->AHB1RSTR |= (1 << 3));(RCC->AHB1RSTR &= ~(1 << 3));}while(0)		//GPIOD Reset
#define GPIOE_RESET()		do{(RCC->AHB1RSTR |= (1 << 4));(RCC->AHB1RSTR &= ~(1 << 4));}while(0)		//GPIOE Reset
#define GPIOF_RESET()		do{(RCC->AHB1RSTR |= (1 << 5));(RCC->AHB1RSTR &= ~(1 << 5));}while(0)		//GPIOF Reset
#define GPIOG_RESET()		do{(RCC->AHB1RSTR |= (1 << 6));(RCC->AHB1RSTR &= ~(1 << 6));}while(0)		//GPIOG Reset
#define GPIOH_RESET()		do{(RCC->AHB1RSTR |= (1 << 7));(RCC->AHB1RSTR &= ~(1 << 7));}while(0)		//GPIOH Reset
#define GPIOI_RESET()		do{(RCC->AHB1RSTR |= (1 << 8));(RCC->AHB1RSTR &= ~(1 << 8));}while(0)		//GPIOI Reset

//SPIx Peripheral reset
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define SPI1_RESET()		do{(RCC->APB2RSTR |= (1 << 12));(RCC->APB2RSTR &= ~(1 << 12));}while(0)		//SPI1 Reset
#define SPI2_RESET()		do{(RCC->APB1RSTR |= (1 << 14));(RCC->APB1RSTR &= ~(1 << 14));}while(0)		//SPI2 Reset
#define SPI3_RESET()		do{(RCC->APB1RSTR |= (1 << 15));(RCC->APB1RSTR &= ~(1 << 15));}while(0)		//SPI3 Reset

//I2Cx Peripheral reset
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define I2C1_RESET()		do{(RCC->APB1RSTR |= (1 << 21));(RCC->APB1RSTR &= ~(1 << 21));}while(0)		//I2C1 Reset
#define I2C2_RESET()		do{(RCC->APB1RSTR |= (1 << 22));(RCC->APB1RSTR &= ~(1 << 22));}while(0)		//I2C2 Reset
#define I2C3_RESET()		do{(RCC->APB1RSTR |= (1 << 23));(RCC->APB1RSTR &= ~(1 << 23));}while(0)		//I2C3 Reset

//USARTx & UARTx Peripheral reset
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define USART1_RESET()		do{(RCC->APB2RSTR |= (1 << 4));(RCC->APB2RSTR &= ~(1 << 4));}while(0)		//USART1 Reset
#define USART2_RESET()		do{(RCC->APB1RSTR |= (1 << 17));(RCC->APB1RSTR &= ~(1 << 17));}while(0)		//USART2 Reset
#define USART3_RESET()		do{(RCC->APB1RSTR |= (1 << 18));(RCC->APB1RSTR &= ~(1 << 18));}while(0)		//USART3 Reset
#define UART4_RESET()		do{(RCC->APB1RSTR |= (1 << 19));(RCC->APB1RSTR &= ~(1 << 19));}while(0)		//UART4  Reset
#define UART5_RESET()		do{(RCC->APB1RSTR |= (1 << 20));(RCC->APB1RSTR &= ~(1 << 20));}while(0)		//UART5  Reset
#define USART6_RESET()		do{(RCC->APB2RSTR |= (1 << 5));(RCC->APB2RSTR &= ~(1 << 5));}while(0)		//USART6 Reset

//SYSCFG Peripheral reset
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define SYSCFG_RESET()		do{(RCC->APB2RSTR |= (1 << 14));(RCC->APB2RSTR &= ~(1 << 14));}while(0)		//SYSCFG Reset



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Peripheral bit position definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//SPI bit position definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//SPI Control register 1 bit position definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define SPI_CR1_CPHA		0
#define SPI_CR1_CPOL		1
#define SPI_CR1_MSTR		2
#define SPI_CR1_BR			3
//				BR			4
//				BR			5
#define SPI_CR1_SPE			6
#define SPI_CR1_LSBFIRST	7
#define SPI_CR1_SSI			8
#define SPI_CR1_SSM			9
#define SPI_CR1_RXONLY		10
#define SPI_CR1_DFF			11
#define SPI_CR1_CRCNEXT		12
#define SPI_CR1_CRCEN		13
#define SPI_CR1_BIDIOE		14
#define SPI_CR1_BIDIMODE	15

//SPI Control register 2 bit position definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define SPI_CR2_RXDMAEN		0
#define SPI_CR2_TXDMAEN		1
#define SPI_CR2_SSOE		2
//RESERVED					3
#define SPI_CR2_FRF			4
#define SPI_CR2_ERRIE		5
#define SPI_CR2_RXNEIE		6
#define SPI_CR2_TXEIE		7
//RESERVED					8
//RESERVED					9
//RESERVED					10
//RESERVED					11
//RESERVED					12
//RESERVED					13
//RESERVED					14
//RESERVED					15

//SPI status register bit position definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define SPI_SR_RXNE			0
#define SPI_SR_TXE			1
#define SPI_SR_CHSIDE		2
#define SPI_SR_UDR			3
#define SPI_SR_CRCERR		4
#define SPI_SR_MODF			5
#define SPI_SR_OVR			6
#define SPI_SR_BSY			7
#define SPI_SR_FRE			8
//RESERVED					9
//RESERVED					10
//RESERVED					11
//RESERVED					12
//RESERVED					13
//RESERVED					14
//RESERVED					15

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//I2C bit position definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//I2C Control register 1 bit position definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define I2C_CR1_PE			0
#define I2C_CR1_SMBUS		1
//RESERVED					2
#define I2C_CR1_SMBTYPE		3
#define I2C_CR1_ENARP		4
#define I2C_CR1_ENPEC		5
#define I2C_CR1_ENGC		6
#define I2C_CR1_NOSTRETCH	7
#define I2C_CR1_START		8
#define I2C_CR1_STOP		9
#define I2C_CR1_ACK			10
#define I2C_CR1_POS			11
#define I2C_CR1_PEC			12
#define I2C_CR1_ALERT		13
//RESERVED					14
#define I2C_CR1_SWRST		15

//I2C Control register 2 bit position definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define I2C_CR2_FREQ		0
//				FREQ		1
//				FREQ		2
//				FREQ		3
//				FREQ		4
//				FREQ		5
//RESERVED					6
//RESERVED					7
#define I2C_CR2_ITERREN		8
#define I2C_CR2_ITEVTEN		9
#define I2C_CR2_ITBUFEN		10
#define I2C_CR2_DMAEN		11
#define I2C_CR2_LAST		12
//RESERVED					13
//RESERVED					14
//RESERVED					15

//I2C Own address register 1 bit position definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define I2C_OAR1_ADD0		0
#define I2C_OAR1_ADD7_1		1
//				 ADD7_1		2
//				 ADD7_1		3
//				 ADD7_1		4
//				 ADD7_1		5
//				 ADD7_1		6
//				 ADD7_1		7
#define I2C_OAR1_ADD9_8		8
//				 ADD9_8		9
//RESERVED					10
//RESERVED					11
//RESERVED					12
//RESERVED					13
//RESERVED					14
#define I2C_OAR1_			15

//I2C Status register 1 bit position definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define I2C_SR1_SB			0
#define I2C_SR1_ADDR		1
#define I2C_SR1_BTF			2
#define I2C_SR1_ADD10		3
#define I2C_SR1_STOPF		4
//RESERVED					5
#define I2C_SR1_RXNE		6
#define I2C_SR1_TXE			7
#define I2C_SR1_BERR		8
#define I2C_SR1_ARLO		9
#define I2C_SR1_AF			10
#define I2C_SR1_OVR			11
#define I2C_SR1_PECERR		12
//RESERVED					13
#define I2C_SR1_TIMEOUT		14
#define I2C_SR1_SMBALERT	15

//I2C Status register 2 bit position definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define I2C_SR2_MSL			0
#define I2C_SR2_BUSY		1
#define I2C_SR2_TRA			2
//RESERVED					3
#define I2C_SR2_GENCALL		4
#define I2C_SR2_SMBDEFAULT	5
#define I2C_SR2_SMBHOST		6
#define I2C_SR2_DUALF		7
#define I2C_SR2_PEC			8
//				PEC			9
//				PEC			10
//				PEC			11
//				PEC			12
//				PEC			13
//				PEC			14
//				PEC			15

//I2C Clock Control register bit position definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define I2C_CCR_CCR			0
//				CCR			1
//				CCR			2
//				CCR			3
//				CCR			4
//				CCR			5
//				CCR			6
//				CCR			7
//				CCR			8
//				CCR			9
//				CCR			10
//				CCR			11
//RESERVED					12
//RESERVED					13
#define I2C_CCR_DUTY		14
#define I2C_CCR_FS			15

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//USART bit position definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//USART Control register 1 bit position definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define USART_CR1_SBK		0
#define USART_CR1_RWU		1
#define USART_CR1_RE		2
#define USART_CR1_TE		3
#define USART_CR1_IDLEIE	4
#define USART_CR1_RXNEIE	5
#define USART_CR1_TCIE		6
#define USART_CR1_TXEIE		7
#define USART_CR1_PEIE		8
#define USART_CR1_PS		9
#define USART_CR1_PCE		10
#define USART_CR1_WAKE		11
#define USART_CR1_M			12
#define USART_CR1_UE		13
//RESERVED					14
#define USART_CR1_OVER8		15

//USART Control register 2 bit position definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define USART_CR2_ADD		0
//				  ADD		1
//				  ADD		2
//				  ADD		3
//RESERVED					4
#define USART_CR2_LBDL		5
#define USART_CR2_LBDIE		6
//RESERVED					7
#define USART_CR2_LBCL		8
#define USART_CR2_CPHA		9
#define USART_CR2_CPOL		10
#define USART_CR2_CLKEN		11
#define USART_CR2_STOP		12
//				  STOP		13
#define USART_CR2_LINEN		14
//RESERVED					15

//USART Control register 3 bit position definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define USART_CR3_EIE		0
#define USART_CR3_IREN		1
#define USART_CR3_IRLP		2
#define USART_CR3_HDSEL		3
#define USART_CR3_NACK		4
#define USART_CR3_SCEN		5
#define USART_CR3_DMAR		6
#define USART_CR3_DMAT		7
#define USART_CR3_RTSE		8
#define USART_CR3_CTSE		9
#define USART_CR3_CTSIE		10
#define USART_CR3_ONEBIT	11
//RESERVED					12
//RESERVED					13
//RESERVED					14
//RESERVED					15

//USART Status register bit position definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define USART_SR_PE			0
#define USART_SR_FE			1
#define USART_SR_NF			2
#define USART_SR_ORE		3
#define USART_SR_IDLE		4
#define USART_SR_RXNE		5
#define USART_SR_TC			6
#define USART_SR_TXE		7
#define USART_SR_LBD		8
#define USART_SR_CTS		9
//RESERVED					10
//RESERVED					11
//RESERVED					12
//RESERVED					13
//RESERVED					14
//RESERVED					15



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//NVIC IRQ & IRQ priority macros
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//IRQ Numbers macros
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define IRQ_NO_EXTI0		6
#define IRQ_NO_EXTI1 		7
#define IRQ_NO_EXTI2 		8
#define IRQ_NO_EXTI3 		9
#define IRQ_NO_EXTI4 		10
#define IRQ_NO_EXTI9_5 		23
#define IRQ_NO_EXTI15_10 	40
#define IRQ_NO_SPI1			35
#define IRQ_NO_SPI2         36
#define IRQ_NO_SPI3         51
#define IRQ_NO_I2C1_EV		31
#define IRQ_NO_I2C1_ER		32
#define IRQ_NO_USART1	    37
#define IRQ_NO_USART2	    38
#define IRQ_NO_USART3	    39
#define IRQ_NO_UART4	    52
#define IRQ_NO_UART5	    53
#define IRQ_NO_USART6	    71

//NVIC IRQ Priority levels
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define NVIC_IRQ_PRI0		0
#define NVIC_IRQ_PRI15		15

//Number of PR bits
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define NO_PR_BITS_IMPLEMENTED  4


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Generic macros
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define ENABLE			1
#define DISABLE			0
#define SET				ENABLE
#define RESET			DISABLE
#define GPIO_PIN_SET	SET
#define GPIO_PIN_RESET	RESET
#define FLAG_SET		SET
#define FLAG_RESET		RESET

#include "stm32f407xx_GPIOx_Driver.h"
#include "stm32f407xx_SPIx_Driver.h"
#include "stm32f407xx_I2Cx_Driver.h"
#include "stm32f407xx_USARTx_Driver.h"
#include "stm32f407xx_RCC_Driver.h"


#endif /* STM32F407XX_H_ */
